name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: husterxun
  BACKEND_IMAGE: husterxun/telegram-backend
  FRONTEND_IMAGE: husterxun/telegram-frontend
  BUILDER_IMAGE: husterxun/telegram-builder

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Go mod tidy
      run: |
        cd backend
        go mod tidy
        go mod verify

    - name: Go vet
      run: |
        cd backend
        go vet ./...

    - name: Go fmt check
      run: |
        cd backend
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Frontend lint
      run: |
        cd frontend
        npm run lint --if-present

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 构建和推送镜像
  build-and-push:
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    if: github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push builder image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/builder
        push: true
        tags: ${{ env.BUILDER_IMAGE }}:latest,${{ env.BUILDER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.BACKEND_IMAGE }}:latest,${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.FRONTEND_IMAGE }}:latest,${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署通知
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Deployment notification
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "📦 Images pushed to Docker Hub:"
        echo "   - ${{ env.BACKEND_IMAGE }}:${{ github.sha }}"
        echo "   - ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}"
        echo "   - ${{ env.BUILDER_IMAGE }}:${{ github.sha }}"
        echo ""
        echo "🔗 Quick start command:"
        echo "   docker-compose -f docker-compose.prod.yml up -d" 